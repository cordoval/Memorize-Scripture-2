<?xml version="1.0" encoding="UTF-8"?>
<framework xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schemas/frameworkDescriptionVersion1.1.xsd" name="Symfony" invoke="&quot;$PhpExecutable$&quot; &quot;$ProjectFileDir$/app/console&quot;" alias="s" enabled="true" version="1">
  <command>
    <name>help</name>
    <help><![CDATA[The <info>help</info> command displays help for a given command:<br/> <br/> <info>./symfony help list</info><br/> <br/> You can also output the help as XML by using the <comment>--xml</comment> option:<br/> <br/> <info>./symfony help --xml list</info>]]></help>
    <params>command_name[=null]</params>
  </command>
  <command>
    <name>?</name>
    <help><![CDATA[The <info>help</info> command displays help for a given command:<br/> <br/> <info>./symfony help list</info><br/> <br/> You can also output the help as XML by using the <comment>--xml</comment> option:<br/> <br/> <info>./symfony help --xml list</info>]]></help>
    <params>command_name[=null]</params>
  </command>
  <command>
    <name>list</name>
    <help><![CDATA[The <info>list</info> command lists all commands:<br/> <br/> <info>./symfony list</info><br/> <br/> You can also display the commands for a specific namespace:<br/> <br/> <info>./symfony list test</info><br/> <br/> You can also output the information as XML by using the <comment>--xml</comment> option:<br/> <br/> <info>./symfony list --xml</info>]]></help>
    <params>command namespace[=null]</params>
  </command>
  <command>
    <name>assetic:dump</name>
    <params>write_to[=null]</params>
  </command>
  <command>
    <name>assets:install</name>
    <params>target</params>
  </command>
  <command>
    <name>cache:clear</name>
    <help><![CDATA[The <info>cache:clear</info> command clears the application cache for a given environment<br/> and debug mode:<br/> <br/> <info>./app/console cache:clear --env=dev</info><br/> <info>./app/console cache:clear --env=prod --without-debug</info>]]></help>
  </command>
  <command>
    <name>cache:warmup</name>
    <help><![CDATA[The <info>cache:warmup</info> command warms up the cache.<br/> <br/> Before running this command, the cache must be empty.]]></help>
  </command>
  <command>
    <name>container:debug</name>
    <help><![CDATA[The <info>container:debug</info> displays all configured <comment>public</comment> services:<br/> <br/> <info>container:debug</info><br/> <br/> You can also search for specific services using wildcards (*):<br/> <br/> <info>container:debug doctrine.*</info><br/> <br/> <info>container:debug *event_manager</info><br/> <br/> To get specific information about a service, use specify its name exactly:<br/> <br/> <info>container:debug validator</info><br/> <br/> By default, private services are hidden. You can display all services by<br/> using the --show-private flag:<br/> <br/> <info>container:debug --show-private</info>]]></help>
    <params>name[=null]</params>
  </command>
  <command>
    <name>doctrine:ensure-production-settings</name>
    <help><![CDATA[The <info>doctrine:ensure-production-settings</info> command ensures that Doctrine is properly configured for a production environment.:<br/> <br/> <info>./app/console doctrine:ensure-production-settings</info><br/> <br/> You can also optionally specify the <comment>--em</comment> option to specify which entity manager to use:<br/> <br/> <info>./app/console doctrine:ensure-production-settings --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:cache:clear-metadata</name>
    <help><![CDATA[The <info>doctrine:cache:clear-metadata</info> command clears all metadata cache for the default entity manager:<br/> <br/> <info>./app/console doctrine:cache:clear-metadata</info><br/> <br/> You can also optionally specify the <comment>--em</comment> option to specify which entity manager to clear the cache for:<br/> <br/> <info>./app/console doctrine:cache:clear-metadata --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:cache:clear-query</name>
    <help><![CDATA[The <info>doctrine:cache:clear-query</info> command clears all query cache for the default entity manager:<br/> <br/> <info>./app/console doctrine:cache:clear-query</info><br/> <br/> You can also optionally specify the <comment>--em</comment> option to specify which entity manager to clear the cache for:<br/> <br/> <info>./app/console doctrine:cache:clear-query --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:cache:clear-result</name>
    <help><![CDATA[The <info>doctrine:cache:clear-result</info> command clears all result cache for the default entity manager:<br/> <br/> <info>./app/console doctrine:cache:clear-result</info><br/> <br/> You can also optionally specify the <comment>--em</comment> option to specify which entity manager to clear the cache for:<br/> <br/> <info>./app/console doctrine:cache:clear-result --em=default</info><br/> <br/> If you don't want to clear all result cache you can specify some additional options to control what cache is deleted:<br/> <br/> <info>./app/console doctrine:cache:clear-result --id=cache_key</info><br/> <br/> Or you can specify a <comment>--regex</comment> to delete cache entries that match it:<br/> <br/> <info>./app/console doctrine:cache:clear-result --regex="user_(.*)"</info><br/> <br/> You can also specify a <comment>--prefix</comment> or <comment>--suffix</comment> to delete cache entries for:<br/> <br/> <info>./app/console doctrine:cache:clear-result --prefix="user_" --suffix="_frontend"</info>]]></help>
  </command>
  <command>
    <name>doctrine:data:load</name>
    <help><![CDATA[The <info>doctrine:data:load</info> command loads data fixtures from your bundles:<br/> <br/> <info>./app/console doctrine:data:load</info><br/> <br/> You can also optionally specify the path to fixtures with the <info>--fixtures</info> option:<br/> <br/> <info>./app/console doctrine:data:load --fixtures=/path/to/fixtures1 --fixtures=/path/to/fixtures2</info><br/> <br/> If you want to append the fixtures instead of flushing the database first you can use the <info>--append</info> option:<br/> <br/> <info>./app/console doctrine:data:load --append</info>]]></help>
  </command>
  <command>
    <name>doctrine:database:create</name>
    <help><![CDATA[The <info>doctrine:database:create</info> command creates the default connections database:<br/> <br/> <info>./app/console doctrine:database:create</info><br/> <br/> You can also optionally specify the name of a connection to create the database for:<br/> <br/> <info>./app/console doctrine:database:create --connection=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:database:drop</name>
    <help><![CDATA[The <info>doctrine:database:drop</info> command drops the default connections database:<br/> <br/> <info>./app/console doctrine:database:drop</info><br/> <br/> The --force parameter has to be used to actually drop the database.<br/> <br/> You can also optionally specify the name of a connection to drop the database for:<br/> <br/> <info>./app/console doctrine:database:drop --connection=default</info><br/> <br/> <error>Be careful: All data in a given database will be lost when executing this command.</error>]]></help>
  </command>
  <command>
    <name>doctrine:generate:entities</name>
    <help><![CDATA[The <info>doctrine:generate:entities</info> command generates entity classes and method stubs from your mapping information:<br/> <br/> You have to limit generation of entities to an individual bundle:<br/> <br/> <info>./app/console doctrine:generate:entities MyCustomBundle</info><br/> <br/> Alternatively, you can limit generation to a single entity within a bundle:<br/> <br/> <info>./app/console doctrine:generate:entities "MyCustomBundle" --entity="User"</info><br/> <br/> You have to specify the shortname (without namespace) of the entity you want to filter for.]]></help>
    <params>bundle</params>
  </command>
  <command>
    <name>doctrine:generate:entity</name>
    <help><![CDATA[The <info>doctrine:generate:entity</info> task initializes a new Doctrine entity inside a bundle:<br/> <br/> <info>./app/console doctrine:generate:entity "MyCustomBundle" "User\Group"</info><br/> <br/> The above would initialize a new entity in the following entity namespace <info>Bundle\MyCustomBundle\Entity\User\Group</info>.<br/> <br/> You can also optionally specify the fields you want to generate in the new entity:<br/> <br/> <info>./app/console doctrine:generate:entity "MyCustomBundle" "User\Group" --fields="name:string(255) description:text"</info>]]></help>
    <params>bundle entity</params>
  </command>
  <command>
    <name>doctrine:generate:proxies</name>
    <help><![CDATA[The <info>doctrine:generate:proxies</info> command generates proxy classes for your default entity manager:<br/> <br/> <info>./app/console doctrine:generate:proxies</info><br/> <br/> You can specify the entity manager you want to generate the proxies for:<br/> <br/> <info>./app/console doctrine:generate:proxies --em=name</info>]]></help>
    <params>dest-path[=null]</params>
  </command>
  <command>
    <name>doctrine:generate:repositories</name>
    <help><![CDATA[The <info>doctrine:generate:repositories</info> command generates the configured entity repository classes from your mapping information:<br/> <br/> <info>./app/console doctrine:generate:repositories</info>]]></help>
    <params>bundle</params>
  </command>
  <command>
    <name>doctrine:mapping:convert</name>
    <help><![CDATA[The <info>doctrine:mapping:convert</info> command converts mapping information between supported formats:<br/> <br/> <info>./app/console doctrine:mapping:convert xml /path/to/output</info>]]></help>
    <params>to-type dest-path</params>
  </command>
  <command>
    <name>doctrine:mapping:import</name>
    <help><![CDATA[The <info>doctrine:mapping:import</info> command imports mapping information from an existing database:<br/> <br/> <info>./app/console doctrine:mapping:import "MyCustomBundle" xml</info><br/> <br/> You can also optionally specify which entity manager to import from with the <info>--em</info> option:<br/> <br/> <info>./app/console doctrine:mapping:import "MyCustomBundle" xml --em=default</info>]]></help>
    <params>bundle mapping-type[=null]</params>
  </command>
  <command>
    <name>doctrine:mapping:info</name>
    <help><![CDATA[The <info>doctrine:mapping:info</info> shows basic information about which<br/> entities exist and possibly if their mapping information contains errors or not.<br/> <br/> <info>./app/console doctrine:mapping:info</info><br/> <br/> If you are using multiple entity managers you can pick your choice with the <info>--em</info> option:<br/> <br/> <info>./app/console doctrine:mapping:info --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:migrations:diff</name>
    <help><![CDATA[The <info>%command.name%</info> command generates a migration by comparing your current database to your mapping information:<br/> <br/> <info>%command.full_name%</info><br/> <br/> You can optionally specify a <comment>--editor-cmd</comment> option to open the generated file in your favorite editor:<br/> <br/> <info>%command.full_name% --editor-cmd=mate</info>]]></help>
  </command>
  <command>
    <name>doctrine:migrations:execute</name>
    <help><![CDATA[The <info>%command.name%</info> command executes a single migration version up or down manually:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS</info><br/> <br/> If no <comment>--up</comment> or <comment>--down</comment> option is specified it defaults to up:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --down</info><br/> <br/> You can also execute the migration as a <comment>--dry-run</comment>:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --dry-run</info><br/> <br/> You can output the would be executed SQL statements to a file with <comment>--write-sql</comment>:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --write-sql</info><br/> <br/> Or you can also execute the migration without a warning message wich you need to interact with:<br/> <br/> <info>%command.full_name% --no-interaction</info>]]></help>
    <params>version</params>
  </command>
  <command>
    <name>doctrine:migrations:generate</name>
    <help><![CDATA[The <info>%command.name%</info> command generates a blank migration class:<br/> <br/> <info>%command.full_name%</info><br/> <br/> You can optionally specify a <comment>--editor-cmd</comment> option to open the generated file in your favorite editor:<br/> <br/> <info>%command.full_name% --editor-cmd=mate</info>]]></help>
  </command>
  <command>
    <name>doctrine:migrations:migrate</name>
    <help><![CDATA[The <info>%command.name%</info> command executes a migration to a specified version or the latest available version:<br/> <br/> <info>%command.full_name%</info><br/> <br/> You can optionally manually specify the version you wish to migrate to:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS</info><br/> <br/> You can also execute the migration as a <comment>--dry-run</comment>:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --dry-run</info><br/> <br/> You can output the would be executed SQL statements to a file with <comment>--write-sql</comment>:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --write-sql</info><br/> <br/> Or you can also execute the migration without a warning message wich you need to interact with:<br/> <br/> <info>%command.full_name% --no-interaction</info><br/>]]></help>
    <params>version[=null]</params>
  </command>
  <command>
    <name>doctrine:migrations:status</name>
    <help><![CDATA[The <info>%command.name%</info> command outputs the status of a set of migrations:<br/> <br/> <info>%command.full_name%</info><br/> <br/> You can output a list of all available migrations and their status with <comment>--show-versions</comment>:<br/> <br/> <info>%command.full_name% --show-versions</info>]]></help>
  </command>
  <command>
    <name>doctrine:migrations:version</name>
    <help><![CDATA[The <info>%command.name%</info> command allows you to manually add and delete migration versions from the version table:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --add</info><br/> <br/> If you want to delete a version you can use the <comment>--delete</comment> option:<br/> <br/> <info>%command.full_name% YYYYMMDDHHMMSS --delete</info>]]></help>
    <params>version</params>
  </command>
  <command>
    <name>doctrine:query:dql</name>
    <help><![CDATA[The <info>doctrine:query:dql</info> command executes the given DQL query and outputs the results:<br/> <br/> <info>./app/console doctrine:query:dql "SELECT u FROM User:User u"</info><br/> <br/> You can also optional specify some additional options like what type of hydration to use when executing the query:<br/> <br/> <info>./app/console doctrine:query:dql "SELECT u FROM User:User u" --hydrate=array</info><br/> <br/> Additionally you can specify the first result and maximum amount of results to show:<br/> <br/> <info>./app/console doctrine:query:dql "SELECT u FROM User:User u" --first-result=0 --max-result=30</info>]]></help>
    <params>dql</params>
  </command>
  <command>
    <name>doctrine:query:sql</name>
    <help><![CDATA[The <info>doctrine:query:sql</info> command executes the given DQL query and outputs the results:<br/> <br/> <info>./app/console doctrine:query:sql "SELECT * from user"</info>]]></help>
    <params>sql</params>
  </command>
  <command>
    <name>doctrine:schema:create</name>
    <help><![CDATA[The <info>doctrine:schema:create</info> command creates the default entity managers schema:<br/> <br/> <info>./app/console doctrine:schema:create</info><br/> <br/> You can also optionally specify the name of a entity manager to create the schema for:<br/> <br/> <info>./app/console doctrine:schema:create --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:schema:drop</name>
    <help><![CDATA[The <info>doctrine:schema:drop</info> command drops the default entity managers schema:<br/> <br/> <info>./app/console doctrine:schema:drop</info><br/> <br/> You can also optionally specify the name of a entity manager to drop the schema for:<br/> <br/> <info>./app/console doctrine:schema:drop --em=default</info>]]></help>
  </command>
  <command>
    <name>doctrine:schema:update</name>
    <help><![CDATA[The <info>doctrine:schema:update</info> command updates the default entity managers schema:<br/> <br/> <info>./app/console doctrine:schema:update</info><br/> <br/> You can also optionally specify the name of a entity manager to update the schema for:<br/> <br/> <info>./app/console doctrine:schema:update --em=default</info>]]></help>
  </command>
  <command>
    <name>init:acl</name>
  </command>
  <command>
    <name>init:bundle</name>
    <help><![CDATA[The <info>init:bundle</info> command generates a new bundle with a basic skeleton.<br/> <br/> <info>./app/console init:bundle "Vendor\HelloBundle" src [bundleName]</info><br/> <br/> The bundle namespace must end with "Bundle" (e.g. <comment>Vendor\HelloBundle</comment>)<br/> and can be placed in any directory (e.g. <comment>src</comment>).<br/> <br/> If you don't specify a bundle name (e.g. <comment>HelloBundle</comment>), the bundle name will<br/> be the concatenation of the namespace segments (e.g. <comment>VendorHelloBundle</comment>).]]></help>
    <params>namespace dir bundleName[=null]</params>
  </command>
  <command>
    <name>router:debug</name>
    <help><![CDATA[The <info>router:debug</info> displays the configured routes:<br/> <br/> <info>router:debug</info>]]></help>
    <params>name[=null]</params>
  </command>
  <command>
    <name>router:dump-apache</name>
    <help><![CDATA[The <info>router:dump-apache</info> dumps all routes as Apache rewrite rules.<br/> These can then be used with the ApacheUrlMatcher to use Apache for route<br/> matching.<br/> <br/> <info>router:dump-apache</info>]]></help>
    <params>script_name[=null]</params>
  </command>
  <command>
    <name>swiftmailer:spool:send</name>
    <help><![CDATA[The <info>swiftmailer:spool:send</info> command send all emails from the spool.<br/> <br/> <info>./app/console swiftmailer:spool:send --message-limit=10 --time-limit=10</info><br/>]]></help>
  </command>
  <help><![CDATA[Symfony version 2.0.0-DEV - app/dev<br/><br/>Usage:<br/> [options] command [arguments]<br/><br/>Options:<br/> --help -h Display this help message.<br/> --quiet -q Do not output any message.<br/> --verbose -v Increase verbosity of messages.<br/> --version -V Display this program version.<br/> --ansi -a Force ANSI output.<br/> --no-interaction -n Do not ask any interactive question.<br/> --shell -s Launch the shell.<br/> --env -e The Environment name.<br/> --no-debug Switches off debug mode.<br/><br/>Available commands:<br/> help Displays help for a command (?)<br/> list Lists commands<br/>assetic<br/> :dump Dumps all assets to the filesystem<br/>assets<br/> :install <br/>cache<br/> :clear Clear the cache<br/> :warmup Warms up an empty cache<br/>container<br/> :debug Displays current services for an application<br/>doctrine<br/> :ensure-production-settings Verify that Doctrine is properly configured for a production environment.<br/>doctrine:cache<br/> :clear-metadata Clear all metadata cache for a entity manager.<br/> :clear-query Clear all query cache for a entity manager.<br/> :clear-result Clear result cache for a entity manager.<br/>doctrine:data<br/> :load Load data fixtures to your database.<br/>doctrine:database<br/> :create Create the configured databases.<br/> :drop Drop the configured databases.<br/>doctrine:generate<br/> :entities Generate entity classes and method stubs from your mapping information.<br/> :entity Generate a new Doctrine entity inside a bundle.<br/> :proxies Generates proxy classes for entity classes.<br/> :repositories Generate repository classes from your mapping information.<br/>doctrine:mapping<br/> :convert Convert mapping information between supported formats.<br/> :import Import mapping information from an existing database.<br/> :info Show basic information about all mapped entities.<br/>doctrine:migrations<br/> :diff Generate a migration by comparing your current database to your mapping information.<br/> :execute Execute a single migration version up or down manually.<br/> :generate Generate a blank migration class.<br/> :migrate Execute a migration to a specified version or the latest available version.<br/> :status View the status of a set of migrations.<br/> :version Manually add and delete migration versions from the version table.<br/>doctrine:query<br/> :dql Executes arbitrary DQL directly from the command line.<br/> :sql Executes arbitrary SQL directly from the command line.<br/>doctrine:schema<br/> :create Processes the schema and either create it directly on EntityManager Storage Connection or generate the SQL output.<br/> :drop Drop the complete database schema of EntityManager Storage Connection or generate the corresponding SQL output.<br/> :update Processes the schema and either update the database schema of EntityManager Storage Connection or generate the SQL output.<br/>init<br/> :acl <br/> :bundle <br/>router<br/> :debug Displays current routes for an application<br/> :dump-apache Dumps all routes as Apache rewrite rules<br/>swiftmailer:spool<br/> :send Send emails from the spool<br/>]]></help>
</framework>

